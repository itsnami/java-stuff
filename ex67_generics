########################################################## generics for METHODS
package helloWorld2;

public class Main {

	public static void main(String[] args) {
// generics = enable types (classes and interfaces) to be parameters when defining: classes, interface and methods
// a benefit is to eliminate the need to create multiple versions of methods or classes for various data types
// use 1 version for all reference types
		
		Integer[] intArray = {1,2,3,4,5};
		Double[] doubleArray = {5.5,4.4,3.3,2.2,1.1};
		Character[] charArray = {'H','E', 'L', 'L', 'O'};
		String[] stringArray = {"B","Y","E"};
		
		displayArray(intArray);
		displayArray(doubleArray);
		displayArray(charArray);
		displayArray(stringArray);
		//
		System.out.println(); //ignore
		//
		System.out.println(getFirst(intArray));
		System.out.println(getFirst(doubleArray));
		System.out.println(getFirst(charArray));
		System.out.println(getFirst(stringArray));
		
	}
	public static <T> void displayArray(T[] array) { // only Using generic
		for(T x: array) {
			System.out.print(x+ " ");
		}
		System.out.println();
	}
	public static <T> T getFirst(T[] array) { // Using and Returning generic
		return array[0];
	}
}

##########################################################  generics for CLASSES

package helloWorld2;

public class Main {

	public static void main(String[] args) {
		
		MyGenericClass<Integer> myInt = new MyGenericClass<>(1);
		MyGenericClass<Double> myDouble = new MyGenericClass<>(3.14);
		MyGenericClass<Character> myCharacter = new MyGenericClass<>('@');
		MyGenericClass<String> myString = new MyGenericClass<>("hello");
		
		System.out.println(myInt.getValue());
		System.out.println(myDouble.getValue());	
		System.out.println(myCharacter.getValue());	
		System.out.println(myString.getValue());	
	}
}

################################ MyGenericClass.java
package helloWorld2;

public class MyGenericClass <T>{					 // <T, T2>
	
	T x;
	
	MyGenericClass(T x){ //constructor				// (T x, T y)
		this.x = x;						// this.y = y;
	}
	public T getValue() { //getter method				// public T2
		return x;						// return y
	}
	
}
##########################################################  BOUNDED TYPES

package helloWorld2;

public class Main {

	public static void main(String[] args) {
// bounded types = allows you to create the objects of a generic class to have data of specific derived types. ex: numbers
		
		MyGenericClass<Integer,Integer> myInt = new MyGenericClass<>(1,2);
		MyGenericClass<Double,Double> myDouble = new MyGenericClass<>(3.14,1.5);
		
		System.out.println(myInt.getValue());
		System.out.println(myDouble.getValue());		
	}
}

###############################
package helloWorld2;
// the extends followed by "CLASS DEFINITION" is what helps controls the type of input
public class MyGenericClass <T extends Number, T2>{
	
	T x;
	T2 y;
	
	MyGenericClass(T x, T2 y){ //constructor
		this.x = x;
		this.y = y;
	}
	public T2 getValue() { //getter method
//		return x;
		return y;
	}
	
}


