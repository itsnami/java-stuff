package helloWorld2;
import java.io.*;

public class Main {

	public static void main(String[] args) throws IOException, InterruptedException {
// multi-threading = process of executing multiple threads simultaneously
// helps maximum utilization of CPU

// Threads are independent, they don't affect the execution of other threads	
// An exception in one thread will not interrupt other threads

// useful for serving multiple clients, multi-player games or other mutually independent tasks

// 2 ways of creating a thread = 1. create a subclass of the Thread class (CLASS extends Thread)
								// 2. create a class that implements the "RUNNABLE" interface (CLASS implements Runnable)
		MyThread thread1 = new MyThread();
		
		
		// alternate technique (this is more commonly used)
		MyRunnable runnable1 = new MyRunnable();
		Thread thread2 = new Thread(runnable1);
		
		
		
		thread1.start();
		// calling thread(ex: Main) will wait until the specified thread DIES/or TILL X amount of milliseconds
		thread1.join(5000);// delay counter in parenthesis
		thread2.start();
		
		// if EXCEPTION occurs in MAIN - other Threads will still continue to operate
//		System.out.println(1/0); //
	
	}
}

################################################################### MyThread.java
package helloWorld2;

public class MyThread extends Thread {
	@Override
	public void run() {
		
		for(int i=10;i>0;i--) {
			System.out.println("thread #1: "+i);
			try {
				Thread.sleep(1000);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
		System.out.println("Thread #1 execution completed");
		
	}
}

################################################################### MyRunnable.java

package helloWorld2;

public class MyRunnable implements Runnable{

	@Override
	public void run() {
		
		for(int i=0;i<10;i++) {
			System.out.println("thread #2: "+i);
			try {
				Thread.sleep(1000);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
		System.out.println("Thread #2 execution completed");
		
		
	}

}

